FROM golang:1.20-alpine3.17 AS builder

WORKDIR /workspace

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY main.go main.go
COPY cmd/ cmd/
COPY pkg/ pkg/

# Build
ARG APP_VSN
ARG APP_COMMIT
ARG APP_DATE
ARG TARGETARCH

RUN CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} \
    go build -ldflags '-s -w \
    -X "github.com/pluralsh/plural/cmd/plural.Version=${APP_VSN}" \
    -X "github.com/pluralsh/plural/cmd/plural.Commit=${APP_COMMIT}" \
    -X "github.com/pluralsh/plural/cmd/plural.Date=${APP_DATE}"' \
    -o plural .

FROM alpine:3.17.2 as tools

ARG TARGETARCH

# renovate: datasource=github-releases depName=helm/helm
ENV HELM_VERSION=v3.10.3

# renovate: datasource=github-releases depName=hashicorp/terraform
ENV TERRAFORM_VERSION=v1.2.9

# renovate: datasource=github-tags depName=kubernetes/kubernetes
ENV KUBECTL_VERSION=v1.25.5


RUN apk add --update --no-cache curl ca-certificates unzip wget openssl build-base && \
    curl -L https://get.helm.sh/helm-${HELM_VERSION}-linux-${TARGETARCH}.tar.gz | tar xvz && \
    mv linux-${TARGETARCH}/helm /usr/local/bin/helm && \
    wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION/v/}/terraform_${TERRAFORM_VERSION/v/}_linux_${TARGETARCH}.zip && \
    unzip terraform_${TERRAFORM_VERSION/v/}_linux_${TARGETARCH}.zip -d /usr/local/bin && \
    curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${TARGETARCH}/kubectl && \
    mv kubectl /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/helm && \
    chmod +x /usr/local/bin/terraform

FROM ubuntu:22.04

ARG TARGETARCH

RUN apt-get -yq update \
  && apt-get -yq install --no-install-recommends \
     apt-transport-https \
     ca-certificates \
     gnupg \
     unzip \
     git \
     openssl \
     curl \
     zsh \
     emacs \
     vim \
     python3 \
     locales-all\
     screen \
     tree \
     less \
     lsb-release \
     openssh-client \
     xz-utils \
     uidmap \
     dbus-user-session \
     iptables \
     kmod \
     #fuse-overlayfs \
     iproute2 \
  && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

COPY --from=builder /workspace/plural /usr/local/bin/plural
COPY --from=tools /usr/local/bin/helm /usr/local/bin/helm
COPY --from=tools /usr/local/bin/terraform /usr/local/bin/terraform
COPY --from=tools /usr/local/bin/kubectl /usr/local/bin/kubectl

# install azure cli
RUN AZ_REPO=$(lsb_release -cs) \
  && curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null \
  && echo "deb [arch=${TARGETARCH}] https://packages.microsoft.com/repos/azure-cli/ ${AZ_REPO} main" | tee /etc/apt/sources.list.d/azure-cli.list \
  && apt-get -yq update \
  && apt-get -yq install --no-install-recommends \
     azure-cli \
  && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# install awscli
RUN if [ "${TARGETARCH}" = "amd64" ]; then \
      curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip; \
    elif [ "${TARGETARCH}" = "arm64" ]; then \
      curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip; \
    fi && \
      unzip awscliv2.zip && \
      ./aws/install -i /usr/local/aws-cli -b /usr/local/bin && \
      aws --version

# install gcloud
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
      apt-get update -y && apt-get install -y \
      google-cloud-sdk \
      google-cloud-sdk-gke-gcloud-auth-plugin && \
      gcloud --help

# create plural user
RUN useradd -u 1000 -ms /bin/bash plural

# install s6
# notes: https://github.com/just-containers/s6-overlay/blob/master/MOVING-TO-V3.md
ENV S6_OVERLAY_VERSION=3.1.5.0
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-x86_64.tar.xz /tmp
RUN tar -C / -Jxpf /tmp/s6-overlay-x86_64.tar.xz
COPY dockerfiles/s6-rc.d /etc/s6-overlay/s6-rc.d


# install podman
RUN apt-get -yq update \
  && apt-get -yq install --no-install-recommends \
     podman \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*


RUN setcap cap_setuid+ep /usr/bin/newuidmap
RUN setcap cap_setgid+ep /usr/bin/newgidmap
RUN chmod 0777 /usr/bin/newuidmap
RUN chmod 0777 /usr/bin/newgidmap

#RUN echo "plural:100000:65536" > /etc/subuid
#RUN echo "plural:100000:65536" > /etc/subgid
RUN printf "plural:1:999\nplural:1001:64535" > /etc/subuid
RUN printf "plural:1:999\nplural:1001:64535" > /etc/subgid
#RUN echo "plural ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers

# setup dirs
RUN mkdir -p /home/plural/.local/share/containers && \
    mkdir -p /home/plural/.config/containers && \
    mkdir -p /var/lib/containers

# for rootfull podman
COPY dockerfiles/podman-conf/rootfull/containers.conf /etc/containers/containers.conf
COPY dockerfiles/podman-conf/rootfull/storage.conf /etc/containers/storage.conf
# for rootless podman
COPY --chown=1000:1000 dockerfiles/podman-conf/rootless/containers.conf /home/plural/.config/containers/containers.conf
COPY --chown=1000:1000 dockerfiles/podman-conf/rootless/storage.conf /home/plural/.config/containers/storage.conf
# rootless podman still needs to read these
RUN chmod 644 /etc/containers/containers.conf && \
    chmod 644 /etc/containers/storage.conf

# circumvent overlayfs req?
RUN chown plural:plural -R /home/plural && chown root:root /var/lib/containers && chmod g+s /var/lib/containers

VOLUME /var/lib/containers
VOLUME /home/plural/.local/share/containers

ENV _CONTAINERS_USERNS_CONFIGURED=""

RUN mkdir -p /var/lib/shared/overlay-images \
             /var/lib/shared/overlay-layers \
             /var/lib/shared/vfs-images \
             /var/lib/shared/vfs-layers && \
    touch /var/lib/shared/overlay-images/images.lock && \
    touch /var/lib/shared/overlay-layers/layers.lock && \
    touch /var/lib/shared/vfs-images/images.lock && \
    touch /var/lib/shared/vfs-layers/layers.lock


# Alias "docker" to "podman"
RUN ln -s /usr/bin/podman /usr/bin/docker

#RUN chsh -s /bin/bash podman

# install kind
# K8s.io KinD
ENV KIND_VERSION=v0.20.0
RUN curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64 \
    && chmod +x ./kind \
    && mv ./kind /usr/bin/kind

WORKDIR /root

ENV TERM=xterm-256color
ENV LC_ALL=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN git clone https://github.com/powerline/fonts.git --depth=1 && \
      sh fonts/install.sh && \
      rm -rf fonts

WORKDIR $GOPATH/src/plural/

COPY start-session.sh /usr/local/bin/start-session.sh
COPY boot.sh /home/plural/boot.sh
RUN chmod +x /usr/local/bin/start-session.sh && \
      chmod +x /home/plural/boot.sh

WORKDIR /home/plural
#ENV XDG_RUNTIME_DIR=/home/plural/.docker
#RUN mkdir -p $XDG_RUNTIME_DIR && \
#      chown 1000:0 $XDG_RUNTIME_DIR && \
RUN echo "kernel.unprivileged_userns_clone=1" >> /etc/sysctl.conf && sysctl --system

USER plural
#ENV DOCKER_VERSION=24.0.0
#RUN apt-get -yq update && apt-get install -y curl && rm -rf /var/lib/apt/lists/* \    && curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh \
#RUN curl -fsSL https://get.docker.com/rootless -o get-docker.sh && sh get-docker.sh --version ${DOCKER_VERSION} && usermod -a -G docker plural
#ENV SKIP_IPTABLES=1
#RUN curl -fsSL https://get.docker.com/rootless -o get-docker.sh && sh get-docker.sh 
#&& usermod -a -G docker plural
#ADD https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker /etc/bash_completion.d/docker.sh

# setup rootless docker
#RUN dockerd-rootless-setuptool.sh install --skip-iptables

COPY tmux /home/plural/tmux 
COPY welcome.txt /home/plural/welcome.txt
COPY .screenrc /home/plural/.screenrc

RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
      cat tmux/.zshrc.local >> /home/plural/.zshrc && \
      helm plugin install https://github.com/databus23/helm-diff

RUN   printf "\nexport PATH=$PATH:/sbin" >> /home/plural/.zshrc && \
      printf "\nexport PATH=$PATH:/home/plural/bin" >> /home/plural/.zshrc
      #&& \
#      printf "\nexport DOCKER_HOST=unix:///${XDG_RUNTIME_DIR}/docker.sock" >> /home/plural/.zshrc

ENV GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
ENV GOOGLE_APPLICATION_CREDENTIALS=/home/plural/gcp.json

USER root
#ENTRYPOINT [ "/init" ]
ENTRYPOINT [ "/bin/bash" ]
