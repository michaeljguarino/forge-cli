// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	gqlclient "github.com/pluralsh/gqlclient"
	api "github.com/pluralsh/plural-cli/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Chat provides a mock function with given fields: history
func (_m *Client) Chat(history []*api.ChatMessage) (*api.ChatMessage, error) {
	ret := _m.Called(history)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *api.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func([]*api.ChatMessage) (*api.ChatMessage, error)); ok {
		return rf(history)
	}
	if rf, ok := ret.Get(0).(func([]*api.ChatMessage) *api.ChatMessage); ok {
		r0 = rf(history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func([]*api.ChatMessage) error); ok {
		r1 = rf(history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cluster provides a mock function with given fields: id
func (_m *Client) Cluster(id string) (*api.Cluster, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 *api.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Cluster, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Cluster); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters provides a mock function with no fields
func (_m *Client) Clusters() ([]*api.Cluster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clusters")
	}

	var r0 []*api.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.Cluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessToken provides a mock function with no fields
func (_m *Client) CreateAccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: name
func (_m *Client) CreateDomain(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: event
func (_m *Client) CreateEvent(event *api.UserEventAttributes) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.UserEventAttributes) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInstallation provides a mock function with given fields: id
func (_m *Client) CreateInstallation(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstallation")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKey provides a mock function with given fields: name, content
func (_m *Client) CreateKey(name string, content string) error {
	ret := _m.Called(name, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateKeyBackup provides a mock function with given fields: attrs
func (_m *Client) CreateKeyBackup(attrs api.KeyBackupAttributes) error {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.KeyBackupAttributes) error); ok {
		r0 = rf(attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTrust provides a mock function with given fields: issuer, trust
func (_m *Client) CreateTrust(issuer string, trust string) error {
	ret := _m.Called(issuer, trust)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrust")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(issuer, trust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEabCredential provides a mock function with given fields: cluster, provider
func (_m *Client) DeleteEabCredential(cluster string, provider string) error {
	ret := _m.Called(cluster, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEabCredential")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cluster, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrust provides a mock function with given fields: id
func (_m *Client) DeleteTrust(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrust")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceLogin provides a mock function with no fields
func (_m *Client) DeviceLogin() (*api.DeviceLogin, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceLogin")
	}

	var r0 *api.DeviceLogin
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.DeviceLogin, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.DeviceLogin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DeviceLogin)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleInstances provides a mock function with no fields
func (_m *Client) GetConsoleInstances() ([]*gqlclient.ConsoleInstanceFragment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleInstances")
	}

	var r0 []*gqlclient.ConsoleInstanceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*gqlclient.ConsoleInstanceFragment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*gqlclient.ConsoleInstanceFragment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gqlclient.ConsoleInstanceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEabCredential provides a mock function with given fields: cluster, provider
func (_m *Client) GetEabCredential(cluster string, provider string) (*api.EabCredential, error) {
	ret := _m.Called(cluster, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetEabCredential")
	}

	var r0 *api.EabCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.EabCredential, error)); ok {
		return rf(cluster, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.EabCredential); ok {
		r0 = rf(cluster, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.EabCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cluster, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHelp provides a mock function with given fields: prompt
func (_m *Client) GetHelp(prompt string) (string, error) {
	ret := _m.Called(prompt)

	if len(ret) == 0 {
		panic("no return value specified for GetHelp")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(prompt)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prompt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallation provides a mock function with given fields: name
func (_m *Client) GetInstallation(name string) (*api.Installation, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallation")
	}

	var r0 *api.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Installation, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Installation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallations provides a mock function with no fields
func (_m *Client) GetInstallations() ([]*api.Installation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstallations")
	}

	var r0 []*api.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.Installation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.Installation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyBackup provides a mock function with given fields: name
func (_m *Client) GetKeyBackup(name string) (*api.KeyBackup, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyBackup")
	}

	var r0 *api.KeyBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.KeyBackup, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.KeyBackup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KeyBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepository provides a mock function with given fields: repo
func (_m *Client) GetRepository(repo string) (*api.Repository, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *api.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Repository, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Repository); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTfProviders provides a mock function with no fields
func (_m *Client) GetTfProviders() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTfProviders")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrabAccessToken provides a mock function with no fields
func (_m *Client) GrabAccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GrabAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImpersonateServiceAccount provides a mock function with given fields: email
func (_m *Client) ImpersonateServiceAccount(email string) (string, string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ImpersonateServiceAccount")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListKeyBackups provides a mock function with no fields
func (_m *Client) ListKeyBackups() ([]*api.KeyBackup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListKeyBackups")
	}

	var r0 []*api.KeyBackup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.KeyBackup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.KeyBackup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.KeyBackup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeys provides a mock function with given fields: emails
func (_m *Client) ListKeys(emails []string) ([]*api.PublicKey, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 []*api.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*api.PublicKey, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []*api.PublicKey); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, pwd
func (_m *Client) Login(email string, pwd string) (string, error) {
	ret := _m.Called(email, pwd)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, pwd)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, pwd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginMethod provides a mock function with given fields: email
func (_m *Client) LoginMethod(email string) (*api.LoginMethod, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for LoginMethod")
	}

	var r0 *api.LoginMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.LoginMethod, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *api.LoginMethod); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LoginMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Me provides a mock function with no fields
func (_m *Client) Me() (*api.Me, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Me")
	}

	var r0 *api.Me
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.Me, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Me); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Me)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OIDCProvider provides a mock function with given fields: id, attributes
func (_m *Client) OIDCProvider(id string, attributes *api.OidcProviderAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for OIDCProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.OidcProviderAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OidcToken provides a mock function with given fields: provider, token, email
func (_m *Client) OidcToken(provider gqlclient.ExternalOidcProvider, token string, email string) (string, error) {
	ret := _m.Called(provider, token, email)

	if len(ret) == 0 {
		panic("no return value specified for OidcToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(gqlclient.ExternalOidcProvider, string, string) (string, error)); ok {
		return rf(provider, token, email)
	}
	if rf, ok := ret.Get(0).(func(gqlclient.ExternalOidcProvider, string, string) string); ok {
		r0 = rf(provider, token, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(gqlclient.ExternalOidcProvider, string, string) error); ok {
		r1 = rf(provider, token, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollLoginToken provides a mock function with given fields: token
func (_m *Client) PollLoginToken(token string) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for PollLoginToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsoleInstance provides a mock function with given fields: id, attrs
func (_m *Client) UpdateConsoleInstance(id string, attrs gqlclient.ConsoleInstanceUpdateAttributes) error {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConsoleInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.ConsoleInstanceUpdateAttributes) error); ok {
		r0 = rf(id, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVersion provides a mock function with given fields: spec, tags
func (_m *Client) UpdateVersion(spec *api.VersionSpec, tags []string) error {
	ret := _m.Called(spec, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.VersionSpec, []string) error); ok {
		r0 = rf(spec, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
